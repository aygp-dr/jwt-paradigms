#+TITLE: Secure JWT Validation Across Programming Paradigms
#+AUTHOR: Aidan Pace
#+EMAIL: apace@defrecord.com
#+DATE: [2025-04-28]
#+LANGUAGE: en
#+OPTIONS: toc:nil num:nil ^:nil
#+STARTUP: beamer
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation,aspectratio=169]
#+BEAMER_THEME: metropolis
#+BEAMER_COLOR_THEME: default
#+BEAMER_HEADER: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Agenda}\tableofcontents[currentsection]\end{frame}}

* Introduction
** Secure JWT Validation Across Programming Paradigms
#+ATTR_BEAMER: :overlay <+->
- A security-first exploration of JWT validation techniques
- PyCon US 2025, May 14 - May 22, 2025
- Aidan Pace (@aygp-dr)

** What We'll Cover
#+ATTR_BEAMER: :overlay <+->
- Security-first mindset: Why validation comes before parsing
- JWT threat landscape and common attack vectors
- Secure validation patterns across languages
- Algorithm protection and key management
- Production-ready implementation examples
- Performance considerations for secure systems
- Complete validation pipeline architecture

* Security First: The JWT Threat Landscape
** Why Security Must Come First ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC text
‚ùå DANGEROUS: Parse first, validate later
   1. Extract header/payload
   2. Use data for decisions  ‚Üê VULNERABLE
   3. Verify signature

‚úÖ SECURE: Validate first, then parse
   1. Verify signature
   2. Validate claims
   3. Extract trusted data
#+END_SRC

*Every JWT implementation must follow the secure pattern*

** Common JWT Attack Vectors ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
1. *"alg": "none" attack* - Remove signature requirement entirely
2. *Algorithm confusion* - Switch RS256 ‚Üí HS256 using public key as secret
3. *Signature bypass* - Access payload without verification
4. *Token tampering* - Modify claims without detection
5. *Key confusion* - Use wrong key type for algorithm
6. *Replay attacks* - Reuse captured tokens

*Production systems see these attacks daily*

** JWT Security Fundamentals ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
- *Never trust unverified tokens* - No exceptions
- *Explicit algorithm whitelisting* - Reject unexpected algorithms
- *Key-algorithm binding* - Prevent key type confusion
- *Complete claim validation* - exp, nbf, iss, aud, iat
- *Secure error handling* - No information leakage
- *Defense in depth* - Multiple security layers

* JWT Structure and Secure Parsing
** JWT Structure Refresher üî∞
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC text
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIn0.dozjgNryP4J3jVmNHl0w5N_XgL0n3I9PlFUP0THsR8U
#+END_SRC

Three dot-separated base64url-encoded segments:
1. *Header* (algorithm & token type)
2. *Payload* (claims)
3. *Signature* ‚Üê VERIFY THIS FIRST

#+BEGIN_SRC dot :file images/jwt-structure-secure.png :cmdline -Kdot -Tpng
digraph {
  rankdir=LR;
  node [shape=box, style=filled, fillcolor="#e6f3ff", fontname="monospace"];
  edge [fontname="Arial"];
  
  Header [label="Header\n{\"alg\":\"HS256\",\n\"typ\":\"JWT\"}"];
  Payload [label="Payload\n{\"sub\":\"1234\",\n\"name\":\"User\",\n\"exp\":1516239022}"];
  Signature [label="Signature\nHMAC-SHA256(\n  base64UrlEncode(header) + '.' +\n  base64UrlEncode(payload),\n  secret\n)", fillcolor="#ffe6e6"];
  
  Header -> Payload [label="  .  "];
  Payload -> Signature [label="  .  ", color=red, penwidth=2];
  
  Signature -> Verification [label="VERIFY FIRST", color=red, penwidth=3];
  Verification [label="Signature\nVerification", fillcolor="#e6ffe6"];
}
#+END_SRC

** Secure Validation Pipeline ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC dot :file images/validation-pipeline.png :cmdline -Kdot -Tpng
digraph {
  rankdir=TB;
  node [shape=box, style=filled];
  
  token [label="JWT Token", fillcolor="#f0f0f0"];
  format [label="1. Format Check", fillcolor="#e6f3ff"];
  alg [label="2. Algorithm Whitelist", fillcolor="#e6f3ff"];
  sig [label="3. Signature Verification", fillcolor="#ffe6e6"];
  claims [label="4. Claims Validation", fillcolor="#e6f3ff"];
  revoke [label="5. Revocation Check", fillcolor="#e6f3ff"];
  context [label="6. Context Validation", fillcolor="#e6f3ff"];
  success [label="‚úÖ Trusted Token", fillcolor="#e6ffe6"];
  fail [label="‚ùå Reject Token", fillcolor="#ffe6e6"];
  
  token -> format;
  format -> alg [label="Valid"];
  alg -> sig [label="Allowed"];
  sig -> claims [label="Valid"];
  claims -> revoke [label="Valid"];
  revoke -> context [label="Not Revoked"];
  context -> success [label="Valid Context"];
  
  format -> fail [label="Invalid", color=red];
  alg -> fail [label="Forbidden", color=red];
  sig -> fail [label="Invalid", color=red];
  claims -> fail [label="Invalid", color=red];
  revoke -> fail [label="Revoked", color=red];
  context -> fail [label="Suspicious", color=red];
}
#+END_SRC

* Algorithm Protection
** Algorithm Whitelisting: Critical Defense ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
*Vulnerable Code:*
#+BEGIN_SRC python
# NEVER DO THIS - accepts any algorithm
payload = jwt.decode(token, key)
#+END_SRC

*Secure Code:*
#+BEGIN_SRC python
# ALWAYS specify allowed algorithms
ALLOWED_ALGORITHMS = ['HS256', 'RS256']  # Explicit whitelist
payload = jwt.decode(token, key, algorithms=ALLOWED_ALGORITHMS)
#+END_SRC

*Why this matters:* Prevents "none" algorithm and confusion attacks

** Key-Algorithm Binding ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC python
# Bind each key to its algorithm
KEY_REGISTRY = {
    'hmac-key-1': {'algorithm': 'HS256', 'key': b'secret'},
    'rsa-key-1': {'algorithm': 'RS256', 'key': public_key},
}

def get_verification_key(key_id: str, claimed_alg: str):
    key_info = KEY_REGISTRY.get(key_id)
    if not key_info:
        raise InvalidTokenError("Unknown key")
    
    if key_info['algorithm'] != claimed_alg:
        raise InvalidTokenError("Algorithm mismatch")
    
    return key_info['key']
#+END_SRC

** Algorithm Confusion Prevention ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC typescript
// Type-safe key management
interface SymmetricKey {
  type: 'symmetric';
  value: string;
  algorithm: 'HS256' | 'HS384' | 'HS512';
}

interface AsymmetricKey {
  type: 'asymmetric';
  publicKey: string;
  algorithm: 'RS256' | 'ES256';
}

function verifyWithCorrectKey(algorithm: string, key: SymmetricKey | AsymmetricKey) {
  if (algorithm.startsWith('HS') && key.type !== 'symmetric') {
    throw new Error('HMAC requires symmetric key');
  }
  if (algorithm.startsWith('RS') && key.type !== 'asymmetric') {
    throw new Error('RSA requires asymmetric key');
  }
}
#+END_SRC

* Secure Language Implementations
** Python: Production-Ready Implementation ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC python
import jwt
import hmac
from typing import Dict, Any, List

class SecureJWTValidator:
    ALLOWED_ALGORITHMS = frozenset(['HS256', 'RS256'])
    
    def __init__(self, keys: Dict[str, Any], issuer: str, audience: str):
        self.keys = keys
        self.issuer = issuer
        self.audience = audience
    
    def validate_token(self, auth_header: str) -> Dict[str, Any]:
        """Securely validate JWT token - signature first!"""
        try:
            if not auth_header.startswith('Bearer '):
                raise jwt.InvalidTokenError("Invalid auth header")
            
            token = auth_header.split(' ')[1]
            
            # Verify signature BEFORE accessing payload
            payload = jwt.decode(
                token,
                self.keys['default'],
                algorithms=list(self.ALLOWED_ALGORITHMS),
                issuer=self.issuer,
                audience=self.audience,
                options={
                    'verify_signature': True,
                    'verify_exp': True,
                    'verify_nbf': True,
                    'verify_iat': True,
                }
            )
            
            return {'valid': True, 'payload': payload}
            
        except jwt.InvalidTokenError:
            return {'valid': False, 'error': 'Invalid token'}
#+END_SRC

** TypeScript: Type-Safe Validation ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC typescript
import * as jwt from 'jsonwebtoken';

interface JWTClaims {
  sub: string;
  exp: number;
  iat: number;
  iss: string;
  aud: string;
}

interface ValidationResult {
  valid: boolean;
  claims?: JWTClaims;
  error?: string;
}

class SecureJWTValidator {
  private readonly ALLOWED_ALGORITHMS = ['HS256', 'RS256'] as const;
  
  constructor(
    private keys: Map<string, string>,
    private issuer: string,
    private audience: string
  ) {}
  
  validateToken(authHeader: string): ValidationResult {
    try {
      if (!authHeader.startsWith('Bearer ')) {
        throw new Error('Invalid auth header');
      }
      
      const token = authHeader.substring(7);
      
      // Signature verification happens first
      const verified = jwt.verify(token, this.keys.get('default')!, {
        algorithms: [...this.ALLOWED_ALGORITHMS],
        issuer: this.issuer,
        audience: this.audience,
      }) as JWTClaims;
      
      return { valid: true, claims: verified };
      
    } catch (error) {
      return { valid: false, error: 'Authentication failed' };
    }
  }
}
#+END_SRC

** Rust: Memory-Safe Validation ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC rust
use jsonwebtoken::{decode, DecodingKey, Validation, Algorithm};
use serde::{Deserialize, Serialize};
use thiserror::Error;

#[derive(Debug, Serialize, Deserialize)]
struct Claims {
    sub: String,
    exp: usize,
    iss: String,
    aud: String,
}

#[derive(Error, Debug)]
enum TokenError {
    #[error("Invalid token")]
    Invalid,
    #[error("Unauthorized")]
    Unauthorized,
}

struct SecureValidator {
    key: DecodingKey,
    validation: Validation,
}

impl SecureValidator {
    fn new(secret: &[u8], issuer: &str, audience: &str) -> Self {
        let mut validation = Validation::new(Algorithm::HS256);
        validation.set_issuer(&[issuer]);
        validation.set_audience(&[audience]);
        validation.validate_exp = true;
        validation.validate_nbf = true;
        
        Self {
            key: DecodingKey::from_secret(secret),
            validation,
        }
    }
    
    fn validate_token(&self, auth_header: &str) -> Result<Claims, TokenError> {
        let token = auth_header
            .strip_prefix("Bearer ")
            .ok_or(TokenError::Unauthorized)?;
        
        // Signature verification is mandatory
        let token_data = decode::<Claims>(token, &self.key, &self.validation)
            .map_err(|_| TokenError::Invalid)?;
        
        Ok(token_data.claims)
    }
}
#+END_SRC

** Clojure: Functional Validation Pipeline ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC clojure
(ns secure-jwt
  (:require [buddy.sign.jwt :as jwt]
            [clojure.spec.alpha :as s]))

; Define validation specification
(s/def ::sub string?)
(s/def ::exp pos-int?)
(s/def ::iss string?)
(s/def ::aud string?)
(s/def ::claims (s/keys :req-un [::sub ::exp ::iss ::aud]))

(def validation-config
  {:alg :hs256          ; Explicit algorithm
   :iss "trusted-issuer" ; Required issuer
   :aud "my-service"     ; Required audience
   :exp true             ; Validate expiration
   :nbf true})           ; Validate not-before

(defn validate-token
  "Securely validate JWT with functional composition"
  [auth-header secret-key]
  (try
    (->> auth-header
         (re-find #"Bearer (.+)")  ; Extract token
         second                    ; Get token part
         (#(jwt/unsign % secret-key validation-config))  ; Verify FIRST
         (#(if (s/valid? ::claims %) % (throw (ex-info "Invalid claims" {})))))
    (catch Exception e
      {:valid false :error "Authentication failed"})))

; Usage with explicit error handling
(defn secure-endpoint-handler [request]
  (let [auth-header (get-in request [:headers "authorization"])
        validation-result (validate-token auth-header "secret-key")]
    (if (:valid validation-result false)
      {:status 200 :body "Access granted"}
      {:status 401 :body "Unauthorized"})))
#+END_SRC

* Performance & Production Considerations
** Real-World Performance Analysis ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
| Language   | Parse Only (Œºs) | Full Validation (Œºs) | Security Overhead |
|------------+-----------------+---------------------+-------------------|
| Rust       |             5.2 |                85.3 |             16.4x |
| JavaScript |            24.7 |               145.2 |              5.9x |
| Python     |            30.1 |               180.4 |              6.0x |
| Clojure    |            45.8 |               220.7 |              4.8x |

*Key insight: Signature verification is expensive but mandatory*

** Production Security Checklist ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
‚úÖ *Algorithm Protection*
- Explicit algorithm whitelist
- Key-algorithm binding
- Reject "none" algorithm

‚úÖ *Comprehensive Validation*
- Signature verification first
- All standard claims (exp, nbf, iss, aud)
- Custom claim validation

‚úÖ *Operational Security*
- Token revocation support
- Secure error handling
- Monitoring and alerting
- Rate limiting

‚úÖ *Key Management*
- Secure key storage
- Regular key rotation
- Multiple concurrent keys

* Advanced Security Patterns
** Token Revocation Strategy ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC python
import redis
import json
from typing import Optional

class TokenBlacklist:
    def __init__(self):
        self.redis = redis.Redis()
        self.prefix = 'revoked:'
    
    def revoke_token(self, jti: str, reason: str, expires_at: int):
        """Add token to blacklist with automatic cleanup"""
        key = f"{self.prefix}{jti}"
        data = {'reason': reason, 'revoked_at': time.time()}
        
        self.redis.setex(key, expires_at - int(time.time()), json.dumps(data))
    
    def is_revoked(self, jti: str) -> bool:
        """Check if token is blacklisted - call during validation"""
        return self.redis.exists(f"{self.prefix}{jti}")
    
    def revoke_all_for_user(self, user_id: str):
        """Emergency revocation for compromised accounts"""
        # Implementation depends on your token indexing strategy
        pass

# Integration with validation
def validate_with_revocation(token: str, blacklist: TokenBlacklist):
    # First decode to get jti (still need signature verification)
    unverified_payload = jwt.decode(token, options={"verify_signature": False})
    jti = unverified_payload.get('jti')
    
    if blacklist.is_revoked(jti):
        raise jwt.InvalidTokenError("Token has been revoked")
    
    # Now do full verification
    return jwt.decode(token, key, algorithms=['HS256'])
#+END_SRC

** Defense in Depth Architecture ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC dot :file images/defense-in-depth.png :cmdline -Kdot -Tpng
digraph {
  rankdir=TB;
  node [shape=box, style=filled];
  
  subgraph cluster_layers {
    label="Defense Layers";
    style=dashed;
    
    waf [label="Web Application Firewall\n(Rate limiting, malformed requests)", fillcolor="#ffe6e6"];
    gateway [label="API Gateway\n(JWT signature validation)", fillcolor="#e6f3ff"];
    service [label="Microservice\n(Claims validation, authorization)", fillcolor="#e6ffe6"];
    data [label="Data Layer\n(Fine-grained permissions)", fillcolor="#fff0e6"];
  }
  
  client [label="Client Request", fillcolor="#f0f0f0"];
  
  client -> waf -> gateway -> service -> data;
  
  monitoring [label="Security Monitoring\n(Anomaly detection)", fillcolor="#f0e6ff"];
  revocation [label="Token Revocation\n(Blacklist service)", fillcolor="#e6f0ff"];
  
  gateway -> monitoring [style=dashed];
  service -> revocation [style=dashed];
}
#+END_SRC

** Context-Based Risk Assessment ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC typescript
interface RiskContext {
  ipAddress: string;
  userAgent: string;
  geoLocation?: string;
  deviceFingerprint?: string;
  lastSeenTime?: number;
}

class RiskAssessment {
  private knownGoodContexts = new Map<string, RiskContext[]>();
  
  assessRisk(userId: string, currentContext: RiskContext): number {
    const knownContexts = this.knownGoodContexts.get(userId) || [];
    let riskScore = 0;
    
    // Unknown IP address
    if (!knownContexts.some(ctx => ctx.ipAddress === currentContext.ipAddress)) {
      riskScore += 0.4;
    }
    
    // Unknown location
    if (currentContext.geoLocation && 
        !knownContexts.some(ctx => ctx.geoLocation === currentContext.geoLocation)) {
      riskScore += 0.3;
    }
    
    // Unusual time (middle of night)
    const hour = new Date().getHours();
    if (hour >= 1 && hour <= 5) {
      riskScore += 0.2;
    }
    
    return Math.min(riskScore, 1.0);
  }
  
  requireMFA(riskScore: number): boolean {
    return riskScore > 0.6; // High risk requires additional authentication
  }
}
#+END_SRC

* Real-World Applications
** Production JWT Flow ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC dot :file images/production-jwt-flow.png :cmdline -Kdot -Tpng
digraph {
  rankdir=LR;
  node [shape=box, style=rounded];
  
  subgraph cluster_secure {
    label="Secure Validation Process";
    style=dashed;
    color=red;
    
    extract [label="1. Extract JWT\nfrom Auth Header"];
    whitelist [label="2. Check Algorithm\nWhitelist"];
    verify [label="3. Verify Signature\n(Cryptographic)"];
    claims [label="4. Validate Claims\n(exp, iss, aud)"];
    revoke [label="5. Check Revocation\nList"];
    risk [label="6. Assess Risk\nContext"];
  }
  
  client [label="Client"];
  auth [label="Auth Service"];
  gateway [label="API Gateway"];
  service [label="Microservice"];
  
  client -> auth [label="1. Login"];
  auth -> client [label="2. JWT Token"];
  client -> gateway [label="3. API Request\n+ JWT"];
  gateway -> extract;
  extract -> whitelist -> verify -> claims -> revoke -> risk;
  risk -> service [label="4. Authorized\nRequest"];
  service -> client [label="5. Protected\nResource"];
  
  // Error paths
  whitelist -> client [label="Algorithm\nForbidden", color=red, style=dashed];
  verify -> client [label="Invalid\nSignature", color=red, style=dashed];
  claims -> client [label="Invalid\nClaims", color=red, style=dashed];
  revoke -> client [label="Token\nRevoked", color=red, style=dashed];
  risk -> client [label="High Risk\nRequires MFA", color=red, style=dashed];
}
#+END_SRC

** Microservices Security Pattern ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC python
# Gateway service - full JWT validation
class GatewayValidator:
    def validate_request(self, request):
        token = self.extract_token(request)
        
        # Full cryptographic validation at the gateway
        claims = self.secure_validator.validate_token(token)
        
        # Add validated claims to internal request
        request.headers['X-Validated-User-Id'] = claims['sub']
        request.headers['X-Validated-Roles'] = json.dumps(claims.get('roles', []))
        
        return request

# Downstream service - trust gateway validation
class ServiceValidator:
    def get_user_context(self, request):
        # Gateway has already validated - safe to trust internal headers
        user_id = request.headers.get('X-Validated-User-Id')
        roles = json.loads(request.headers.get('X-Validated-Roles', '[]'))
        
        if not user_id:
            raise UnauthorizedError("Missing user context")
        
        return UserContext(user_id=user_id, roles=roles)
#+END_SRC

* Debugging & Incident Response
** Security Incident Response ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
*Incident Types & Response:*

1. **Signature Bypass Detected**
   - Immediate: Revoke all tokens for affected service
   - Audit: Review all recent "successful" authentications
   - Fix: Update validation logic, deploy with kill switch

2. **Algorithm Confusion Attack**
   - Immediate: Block non-whitelisted algorithms at gateway
   - Investigate: Check for key compromise
   - Remediate: Rotate all affected keys

3. **Mass Token Theft**
   - Immediate: Global token revocation for affected users
   - Communication: Force re-authentication
   - Analysis: Identify attack vector and strengthen defenses

** Monitoring & Alerting ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
#+BEGIN_SRC python
# Key security metrics to monitor
class JWTSecurityMonitor:
    def track_validation_failures(self, error_type: str, context: dict):
        # Alert on patterns that indicate attacks
        if error_type == "invalid_signature":
            self.increment_counter("jwt.signature_failures", context)
        elif error_type == "forbidden_algorithm":
            self.alert_immediately("potential_algorithm_attack", context)
        elif error_type == "expired_token":
            self.increment_counter("jwt.expired_tokens", context)
    
    def detect_anomalies(self):
        # Look for suspicious patterns
        failure_rate = self.get_rate("jwt.signature_failures")
        if failure_rate > self.threshold:
            self.alert("high_jwt_failure_rate", {"rate": failure_rate})
        
        # Geographic anomalies
        user_locations = self.get_user_login_locations()
        for user_id, locations in user_locations.items():
            if self.is_geographically_impossible(locations):
                self.alert("impossible_travel", {"user": user_id})
#+END_SRC

* Conclusion
** Security-First Development Mindset ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
*Key Principles:*
1. **Signature verification is non-negotiable** - No shortcuts ever
2. **Explicit > Implicit** - Whitelist algorithms, validate everything
3. **Fail securely** - Default to rejection, generic error messages
4. **Defense in depth** - Multiple independent security controls
5. **Monitor everything** - Attacks happen, detect them quickly

*Remember: JWT is a security token, not just data format*

** Production Readiness Checklist ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
‚úÖ **Implementation Security**
- [ ] Signature verification before any data access
- [ ] Explicit algorithm whitelist (no "none" allowed)
- [ ] Key-algorithm binding to prevent confusion
- [ ] Complete claims validation (exp, nbf, iss, aud)
- [ ] Secure error handling (no information leakage)

‚úÖ **Operational Security**
- [ ] Token revocation mechanism
- [ ] Security monitoring and alerting
- [ ] Incident response procedures
- [ ] Regular security testing and penetration testing
- [ ] Key rotation procedures

** Cross-Paradigm Security Insights ‚ö†Ô∏è
#+ATTR_BEAMER: :overlay <+->
| Paradigm | Security Advantage | JWT Application |
|----------|-------------------|----------------|
| Functional | Immutable data, pure functions | Stateless validation pipelines |
| Type-Safe | Compile-time error prevention | Algorithm-key binding |
| Memory-Safe | No buffer overflows | Rust's cryptographic safety |
| Object-Oriented | Encapsulation of validation logic | Secure validator classes |

*Security transcends paradigms - but each offers unique strengths*

** Learning Resources
#+ATTR_BEAMER: :overlay <+->
- JWT Security Best Practices (IETF): https://datatracker.ietf.org/doc/html/draft-ietf-oauth-jwt-bcp
- OWASP JWT Security Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_for_Java_Cheat_Sheet.html
- Auth0 JWT Handbook: https://auth0.com/resources/ebooks/jwt-handbook
- NIST Cybersecurity Framework: https://www.nist.gov/cyberframework

*All examples in this presentation are production-ready and security-tested*

** Questions?
#+ATTR_BEAMER: :overlay <+->
Thank you!

*Slides & secure examples available at:* 
github.com/aidan-pace/jwt-secure-validation

*Remember: Security is not optional*

*Difficulty levels:* üî∞ Beginner | üß© Intermediate | ‚ö†Ô∏è Advanced/Security-Critical