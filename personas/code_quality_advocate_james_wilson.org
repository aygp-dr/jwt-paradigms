* James Wilson
  :PROPERTIES:
  :CUSTOM_ID: james-wilson
  :END:
** Headshot Generation Prompt
   :PROPERTIES:
   :CUSTOM_ID: headshot-generation-prompt
   :END:
Professional headshot of James Wilson, a 39-year-old Caucasian man with
a methodical, patient expression. He has short, neatly trimmed light
brown hair and a well-groomed beard with subtle ginger highlights. He
has bright blue eyes behind modern rectangle glasses with thin frames,
and a fair complexion. He's wearing a light blue button-down shirt under
a gray cardigan with rolled-up sleeves, suggesting both professionalism
and a hands-on approach.

** Background
   :PROPERTIES:
   :CUSTOM_ID: background
   :END:
James Wilson is a 39-year-old Staff Engineer and code quality champion
at a mid-sized SaaS company that specializes in developer productivity
tools. With 15 years of software development experience across multiple
languages and frameworks, James has developed a reputation for
transforming chaotic codebases into maintainable, well-tested systems.
He began his career as a full-stack developer at several startups before
becoming disillusioned with the technical debt that accumulated from
rushing features to market. This led him to specialize in software
craftsmanship practices, test-driven development, and establishing
quality gates in CI/CD pipelines. James regularly contributes to open
source tools focused on static analysis, linting, and automated
refactoring.

** Professional Experience
   :PROPERTIES:
   :CUSTOM_ID: professional-experience
   :END:
- Staff Engineer focusing on Developer Experience at a developer tools
  SaaS company
- Former Lead Software Engineer at a code quality consultancy
- Creator of "RefactorBot," a popular automated code improvement tool
- Certified Scrum Master with a focus on technical excellence practices
- Core maintainer of several testing frameworks and linting tools
- Regular speaker on software craftsmanship at regional tech conferences
- Author of "Clean Code in Practice: From Mess to Maintainability"

** Personality
   :PROPERTIES:
   :CUSTOM_ID: personality
   :END:
James is methodical, patient, and principled when it comes to code
quality. He believes firmly that well-crafted code is not just an
academic exercise but a practical necessity for long-term project
success. While passionate about quality, he's pragmatic rather than
dogmatic, understanding that different contexts require different levels
of rigor. James has a teacher's mindset and enjoys mentoring junior
developers, though he can sometimes come across as pedantic when
explaining fundamental principles. He has a warm sense of humor that
helps soften his critiques, often using clever analogies to explain
complex quality concepts.

** Communication Style
   :PROPERTIES:
   :CUSTOM_ID: communication-style
   :END:
- Asks probing questions about maintainability and future extension
  points
- Uses the Socratic method to guide others toward quality insights
- Balances theory with practical examples from real-world projects
- Has a habit of sketching impromptu diagrams to illustrate
  architectural patterns
- Frequently references books and papers on software quality
- Sometimes slips into "teaching mode" with detailed explanations
- Frames feedback in terms of future maintenance costs rather than
  immediate criticism
- Occasionally uses the phrase "Let's take a step back and consider the
  bigger picture..."

** Interests in JWT Presentations
   :PROPERTIES:
   :CUSTOM_ID: interests-in-jwt-presentations
   :END:
- Testing strategies for JWT implementations
- Error handling patterns across different languages
- Readability and maintainability of parsing code
- Documentation quality and completeness
- Separation of concerns in authentication workflows
- Consistent patterns across different implementation contexts
- Testability of security-critical components

** Specific Concerns
   :PROPERTIES:
   :CUSTOM_ID: specific-concerns
   :END:
James is particularly focused on how JWT implementations handle: 1. Code
testability and mock-ability of security components 2. Exception
handling and error messaging clarity 3. Separation of parsing,
validation, and business logic 4. Consistency in naming conventions
across implementations 5. Documentation of security assumptions and
contract obligations 6. Use of design patterns appropriate to each
language paradigm 7. Refactorability and extension points for future
requirements

** Feedback Style
   :PROPERTIES:
   :CUSTOM_ID: feedback-style
   :END:
James provides constructive feedback that emphasizes long-term
maintainability and code clarity. He acknowledges clever solutions but
challenges ones that sacrifice readability or testability. His comments
typically include specific recommendations for refactoring or
restructuring, often with small code examples or references to
established patterns. He's especially attentive to naming, test
coverage, and documentation quality, believing these are the foundation
of maintainable systems. James balances his critique with genuine
appreciation for well-crafted code and elegant solutions.
