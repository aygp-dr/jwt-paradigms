#+TITLE: Paradigms Lost: The Unfulfilled Promises of Modern Programming
#+AUTHOR: Professor Marcus "Spark" Wellington, Ph.D.
#+DATE: [2022-09-15]
#+PUBLISHER: Cambridge University Press
#+LANGUAGE: en
#+OPTIONS: toc:3 num:t
#+OPTIONS: broken-links:mark

* Foreword
:PROPERTIES:
:CUSTOM_ID: foreword
:END:

/By Alan Kay, Computer Scientist/

When Marcus Wellington asked me to write the foreword for this book, I initially hesitated. Not because I doubted the quality of his work—quite the contrary—but because I knew Marcus would not pull punches in his critique of our field's trajectory. What you hold in your hands is not merely a book about programming paradigms, but a passionate argument for what our field could have been, and perhaps still might become.

"Paradigms Lost" is provocative, erudite, and at times, uncomfortably accurate in its diagnosis of our collective technical amnesia. You may not agree with every assertion Wellington makes, but I guarantee his arguments will make you reconsider what we've accepted as progress in programming language design.

In an age of ephemeral frameworks and reinvented wheels, this book dares to ask: what wisdom have we abandoned along the way?

* Preface
:PROPERTIES:
:CUSTOM_ID: preface
:END:

This book began as a series of lectures I delivered at the Symposium on Programming Language Design and Implementation in 2018. The response—equal parts enthusiasm and outrage—convinced me that a more thorough examination was warranted. 

I do not expect this book to be universally embraced. Indeed, if it fails to provoke disagreement, I will consider it a failure. My aim is not to denigrate modern programming practices wholesale, but rather to question our field's sometimes willful ignorance of its own history. I believe that our rush toward novelty has caused us to abandon paradigms that offered elegant solutions to problems we now tackle with brute force and complexity.

To my students past and present: may you approach both innovation and tradition with equal measures of respect and skepticism.

To my colleagues who will undoubtedly find fault with many of my arguments: I welcome the debate.

/Professor Marcus Wellington/
/Cambridge, Massachusetts/
/April 2022/

* Table of Contents                                                    :TOC:
- [[#foreword][Foreword]]
- [[#preface][Preface]]
- [[#introduction-the-amnesia-of-progress][Introduction: The Amnesia of Progress]]
- [[#part-i-the-great-paradigms][Part I: The Great Paradigms]]
  - [[#chapter-1-imperative-programming-and-its-discontents][Chapter 1: Imperative Programming and Its Discontents]]
  - [[#chapter-2-the-functional-ideal][Chapter 2: The Functional Ideal]]
  - [[#chapter-3-object-oriented-programming-the-promise-and-the-reality][Chapter 3: Object-Oriented Programming: The Promise and the Reality]]
  - [[#chapter-4-logic-programming-the-road-not-taken][Chapter 4: Logic Programming: The Road Not Taken]]
  - [[#chapter-5-dataflow-and-reactive-programming-rediscovering-the-wheel][Chapter 5: Dataflow and Reactive Programming: Rediscovering the Wheel]]
- [[#part-ii-what-was-lost][Part II: What Was Lost]]
  - [[#chapter-6-simplicity-versus-easiness][Chapter 6: Simplicity Versus Easiness]]
  - [[#chapter-7-the-expression-problem-and-false-solutions][Chapter 7: The Expression Problem and False Solutions]]
  - [[#chapter-8-type-systems-protection-or-straitjacket][Chapter 8: Type Systems: Protection or Straitjacket?]]
  - [[#chapter-9-homoiconicity-and-linguistic-abstraction][Chapter 9: Homoiconicity and Linguistic Abstraction]]
  - [[#chapter-10-declarative-systems-the-forgotten-paradigm][Chapter 10: Declarative Systems: The Forgotten Paradigm]]
- [[#part-iii-paths-forward][Part III: Paths Forward]]
  - [[#chapter-11-polyglot-programming-the-pragmatic-compromise][Chapter 11: Polyglot Programming: The Pragmatic Compromise]]
  - [[#chapter-12-language-workbenches-and-meta-programming][Chapter 12: Language Workbenches and Meta-Programming]]
  - [[#chapter-13-verification-beyond-testing][Chapter 13: Verification Beyond Testing]]
  - [[#chapter-14-reviving-smalltalk-lessons-from-a-lost-paradigm][Chapter 14: Reviving Smalltalk: Lessons from a Lost Paradigm]]
  - [[#chapter-15-toward-a-synthesis][Chapter 15: Toward a Synthesis]]
- [[#epilogue-computing-as-thought][Epilogue: Computing as Thought]]
- [[#acknowledgments][Acknowledgments]]
- [[#bibliography][Bibliography]]
- [[#index][Index]]

* Introduction: The Amnesia of Progress
:PROPERTIES:
:CUSTOM_ID: introduction
:END:

#+BEGIN_QUOTE
"Those who cannot remember the past are condemned to repeat it."
— George Santayana
#+END_QUOTE

In the breathless coverage of each new programming language or framework, we often encounter a peculiar form of collective amnesia. Features hailed as revolutionary innovations frequently represent the rediscovery of concepts explored decades earlier. This is not merely a matter of historical curiosity, but a fundamental impediment to genuine progress in our field.

Consider the "discovery" of functional programming by mainstream developers in the 2010s. The principles of immutability, first-class functions, and declarative programming trace back to Lisp in the 1950s and ML in the 1970s. Yet how many JavaScript developers, implementing map and reduce operations, recognize their connection to concepts articulated by McCarthy and explored in APL, Scheme, and Haskell?

This amnesia extends beyond mere features to entire paradigms. The excitement surrounding reactive programming often occurs without acknowledgment of dataflow programming languages from the 1970s and early 1980s. Similarly, today's microservice architectures recapitulate many patterns from actor models and Erlang's OTP, albeit with significantly more complexity and operational overhead.

Why does this matter? Because without understanding the historical context of our tools and techniques, we cannot properly evaluate their tradeoffs or applications. We reinvent poorly what was once well-designed, adding unnecessary complexity while failing to incorporate hard-won wisdom.

This book will examine several major programming paradigms—their promises, their shortcomings, and what has been lost in our selective adoption of their principles. I argue that many of the "unsolved problems" in modern software development had viable solutions in paradigms that have been marginalized or forgotten.

My critique is not intended as a Luddite rejection of progress, but rather as a call for a more thoughtful integration of historical knowledge with contemporary practice. The most innovative work in our field has often come not from wholesale reinvention, but from the creative synthesis of ideas across paradigms and time periods.

Let us begin by examining the major paradigms that have shaped programming, before turning to what has been lost in their translation to modern practice.

* Part I: The Great Paradigms
:PROPERTIES:
:CUSTOM_ID: part-i
:END:

** Chapter 1: Imperative Programming and Its Discontents
:PROPERTIES:
:CUSTOM_ID: chapter-1
:END:

#+INCLUDE: "chapters/chapter1.org::*Chapter 1: Imperative Programming and Its Discontents" :only-contents t

** Chapter 2: The Functional Ideal
:PROPERTIES:
:CUSTOM_ID: chapter-2
:END:

#+INCLUDE: "chapters/chapter2.org::*Chapter 2: The Functional Ideal" :only-contents t

** Chapter 3: Object-Oriented Programming: The Promise and the Reality
:PROPERTIES:
:CUSTOM_ID: chapter-3
:END:

#+INCLUDE: "chapters/chapter3.org::*Chapter 3: Object-Oriented Programming: The Promise and the Reality" :only-contents t

** Chapter 4: Logic Programming: The Road Not Taken
:PROPERTIES:
:CUSTOM_ID: chapter-4
:END:

#+INCLUDE: "chapters/chapter4.org::*Chapter 4: Logic Programming: The Road Not Taken" :only-contents t

** Chapter 5: Dataflow and Reactive Programming: Rediscovering the Wheel
:PROPERTIES:
:CUSTOM_ID: chapter-5
:END:

#+INCLUDE: "chapters/chapter5.org::*Chapter 5: Dataflow and Reactive Programming: Rediscovering the Wheel" :only-contents t

* Part II: What Was Lost
:PROPERTIES:
:CUSTOM_ID: part-ii
:END:

** Chapter 6: Simplicity Versus Easiness
:PROPERTIES:
:CUSTOM_ID: chapter-6
:END:

#+INCLUDE: "chapters/chapter6.org::*Chapter 6: Simplicity Versus Easiness" :only-contents t

** Chapter 7: The Expression Problem and False Solutions
:PROPERTIES:
:CUSTOM_ID: chapter-7
:END:

#+INCLUDE: "chapters/chapter7.org::*Chapter 7: The Expression Problem and False Solutions" :only-contents t

** Chapter 8: Type Systems: Protection or Straitjacket?
:PROPERTIES:
:CUSTOM_ID: chapter-8
:END:

#+INCLUDE: "chapters/chapter8.org::*Chapter 8: Type Systems: Protection or Straitjacket?" :only-contents t

** Chapter 9: Homoiconicity and Linguistic Abstraction
:PROPERTIES:
:CUSTOM_ID: chapter-9
:END:

/This chapter explores how homoiconic languages—those where code is represented as data structures within the language itself—enable powerful metaprogramming capabilities. It argues that the loss of homoiconicity in mainstream languages has limited our ability to create domain-specific abstractions./

Key sections include:
- Lisp Macros and Syntactic Abstraction
- Code as Data: The Lisp Advantage
- DSLs Internal and External
- The Expression Problem Revisited
- Why Metaprogramming Remains Niche

** Chapter 10: Declarative Systems: The Forgotten Paradigm
:PROPERTIES:
:CUSTOM_ID: chapter-10
:END:

/This chapter examines declarative programming beyond functional and logic paradigms, including configuration management, build systems, and query languages. It argues that declarative approaches excel at expressing complex relationships and constraints but remain underutilized./

Key sections include:
- SQL: The Most Successful Declarative Language
- Make and Declarative Build Systems
- Infrastructure as Code
- Constraint Satisfaction Problems
- Declarative User Interfaces

* Part III: Paths Forward
:PROPERTIES:
:CUSTOM_ID: part-iii
:END:

** Chapter 11: Polyglot Programming: The Pragmatic Compromise
:PROPERTIES:
:CUSTOM_ID: chapter-11
:END:

/This chapter explores polyglot programming—using different languages for different parts of a system based on their strengths. It examines the benefits and challenges of this approach and how it allows teams to leverage the strengths of multiple paradigms./

Key sections include:
- The Right Tool for the Job
- Interoperability Challenges
- Cognitive Load of Multiple Languages
- Building Polyglot Teams
- Case Studies in Effective Polyglotism

** Chapter 12: Language Workbenches and Meta-Programming
:PROPERTIES:
:CUSTOM_ID: chapter-12
:END:

/This chapter examines language workbenches and other tools for creating domain-specific languages, arguing that they represent one path toward combining the expressiveness of specialized languages with the integration benefits of a common platform./

Key sections include:
- Jetbrains MPS and Language-Oriented Programming
- Racket and Language Creation
- Embedded DSLs versus External DSLs
- Meta-Object Protocols
- The Economics of Language Creation

** Chapter 13: Verification Beyond Testing
:PROPERTIES:
:CUSTOM_ID: chapter-13
:END:

/This chapter explores formal methods and advanced type systems as ways to increase software reliability beyond traditional testing. It examines real-world applications of these approaches and their limitations./

Key sections include:
- Model Checking and Formal Verification
- Dependent Types in Practice
- Property-Based Testing
- Designing for Verification
- The Spectrum of Formal Methods

** Chapter 14: Reviving Smalltalk: Lessons from a Lost Paradigm
:PROPERTIES:
:CUSTOM_ID: chapter-14
:END:

/This chapter uses Smalltalk as a case study of a paradigm that embodied many powerful ideas that remain relevant today, including image-based development, live programming, and uniform object models. It examines how these ideas might be revived in modern contexts./

Key sections include:
- The Smalltalk Environment as IDE Precursor
- Image-Based Development versus File-Based Development
- Live Programming and Immediate Feedback
- Smalltalk's Influence on Modern Systems
- Pharo and Contemporary Smalltalk

** Chapter 15: Toward a Synthesis
:PROPERTIES:
:CUSTOM_ID: chapter-15
:END:

/This chapter argues for a more thoughtful synthesis of programming paradigms, drawing on their complementary strengths while avoiding their individual weaknesses. It examines languages and systems that successfully combine paradigms and suggests directions for future language design./

Key sections include:
- Multi-Paradigm Languages: Scala, F#, and Beyond
- Ecosystem Design Beyond Language Design
- Human Factors in Programming Practice
- Education and the Perpetuation of Paradigms
- The Next Great Paradigm?

* Epilogue: Computing as Thought
:PROPERTIES:
:CUSTOM_ID: epilogue
:END:

In closing, I wish to return to a fundamental question: what is programming? Beyond its practical applications, programming represents a unique form of thought—a way of formalizing processes and interactions that has no direct analog in pre-computing human experience.

The paradigms we choose shape not just our code, but our thinking. They determine which problems we find easy to solve and which we find difficult or even impossible to conceptualize clearly. They influence how we model the world and decompose complex systems.

If, as Wittgenstein suggested, the limits of my language are the limits of my world, then the programming paradigms we master—or fail to master—define the boundaries of what we can create through software.

The unfulfilled promises of various programming paradigms are not merely technical disappointments but missed opportunities to expand our collective cognitive capabilities. When we reject or forget a paradigm, we lose access to a mode of thought that might have illuminated certain problems with unique clarity.

This is not a call for universalism—no single paradigm will ever be optimal for all problems or all minds. Rather, it is an argument for thoughtful eclecticism and historical awareness. By understanding the strengths, limitations, and histories of diverse programming paradigms, we expand our conceptual vocabulary and our ability to match tools to problems.

In the end, computing is too important, too fundamental a technology to allow its evolution to be driven solely by fashion, commercial interests, or path dependency. We owe it to ourselves and to future generations to preserve and develop the full spectrum of programming paradigms, ensuring that no powerful mode of computational thinking becomes truly lost.

* Acknowledgments
:PROPERTIES:
:CUSTOM_ID: acknowledgments
:END:

I am deeply indebted to the many colleagues and students who have challenged and refined my thinking over the years. Particular thanks are due to the Programming Languages research group at Carnegie Mellon, where many of these ideas were first explored during my doctoral work.

Thanks also to Alan Kay, William Byrd, Matthias Felleisen, and Philip Wadler for their insightful comments on early drafts of this manuscript.

For their patient support during the writing process, I thank my wife Eleanor and our children, Thomas and Sophia.

Finally, I am grateful to Cambridge University Press, particularly my editor Sarah Thompson, for believing in this somewhat unconventional project.

* Bibliography
:PROPERTIES:
:CUSTOM_ID: bibliography
:END:

Adams, Michael. "The Evolution of Prolog." In History of Programming Languages Conference (HOPL-II), 1993.

Armstrong, Joe. "A History of Erlang." In Proceedings of the Third ACM SIGPLAN Conference on History of Programming Languages, 2007.

Backus, John. "Can Programming Be Liberated from the von Neumann Style? A Functional Style and Its Algebra of Programs." Communications of the ACM 21, no. 8 (1978): 613-641.

Brooks, Frederick P. "No Silver Bullet – Essence and Accident in Software Engineering." In Proceedings of the IFIP Tenth World Computing Conference, 1986.

Cook, William R. "On Understanding Data Abstraction, Revisited." In Proceedings of the 24th ACM SIGPLAN Conference on Object-Oriented Programming Systems Languages and Applications, 2009.

Gamma, Erich, Richard Helm, Ralph Johnson, and John Vlissides. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley, 1994.

Hickey, Rich. "Simple Made Easy." Keynote at Strange Loop Conference, 2011.

Kay, Alan C. "The Early History of Smalltalk." In History of Programming Languages Conference (HOPL-II), 1993.

Kowalski, Robert. "Algorithm = Logic + Control." Communications of the ACM 22, no. 7 (1979): 424-436.

McCarthy, John. "Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I." Communications of the ACM 3, no. 4 (1960): 184-195.

Milner, Robin. "A Theory of Type Polymorphism in Programming." Journal of Computer and System Sciences 17, no. 3 (1978): 348-375.

Peyton Jones, Simon. "Haskell 98 Language and Libraries: The Revised Report." Cambridge University Press, 2003.

Reynolds, John C. "The Discoveries of Continuations." Lisp and Symbolic Computation 6, no. 3-4 (1993): 233-247.

Steele, Guy L., and Gerald J. Sussman. "The Art of the Interpreter or the Modularity Complex." MIT AI Lab Memo 453, 1978.

Wadler, Philip. "The Expression Problem." Email to the Java-Genericity mailing list, 1998.

* Index
:PROPERTIES:
:CUSTOM_ID: index
:END:

Abstraction, 45, 132, 198
Actor model, 78, 201, 324
Algebraic data types, 89, 213
APL, 53, 136
Backtracking, 112, 113
Clojure, 152, 267
Closures, 63, 195
Combinators, 62
Concurrency, 34, 78, 322
Continuations, 64, 196
Curry-Howard correspondence, 211
Dataflow programming, 127, 310
Dependent types, 338
Domain-specific languages, 229, 315
Dynamic dispatch, 88, 203
Encapsulation, 21, 82
Erlang, 79, 325
Expression problem, 176, 227
F#, 370
Fifth Generation project, 117
Formal verification, 339
Functional programming, 58, 148
Gradual typing, 219
Haskell, 66, 154, 370
Hindley-Milner type system, 65, 214
Homoiconicity, 225
Image-based development, 355
Immutability, 61, 150
Inheritance, 85, 178
Java, 86, 179
Lambda calculus, 59
Language workbenches, 315
Lisp, 60, 152, 225
Logic programming, 110
Lucid, 129
Macros, 226
Make, 252
Message passing, 82, 203
Meta-object protocol, 319
ML, 65, 155, 214
Object-oriented programming, 80
Pharo, 357
Polymorphism, 87, 216
Prolog, 111, 248
Property-based testing, 341
Protocols, 192
Racket, 228, 316
Reactive programming, 131, 312
Referential transparency, 61
Scala, 371
Scheme, 64, 153
Smalltalk, 83, 351
SQL, 247
State, 23, 62
Structural typing, 217
Typeclasses, 192, 216
Unification, 111
Visitor pattern, 183